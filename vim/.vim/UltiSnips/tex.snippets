global !p
def math():
	return vim.eval("vimtex#syntax#in_mathzone()") != "0"
endglobal


# Snippet to make sections etc.
snippet "h([0-5])" "Heading" rbA
`!p
from unidecode import unidecode

# Convert text to label-appropriate format
def toLabel(s):
	def convert(w):
		res = ""
		for c in unidecode(w).lower():
			if c.isalnum():
				res += c
		return res
		
	return "-".join(map(convert, s.split()))

levels = ["chapter", "section", "subsection", "subsubsection", "paragraph", "subparagraph"]
labels = ["ch",      "sec",     "ssec",       "sssec",         "par",       "subpar"]
n = int(match.group(1)) 
`\\`!p snip.rv=levels[n]`{$1}
\label{`!p snip.rv=labels[n]`:${2:`!p snip.rv = toLabel(t[1])`}}

$0
endsnippet


# Non-math stuff

snippet pkg "usepackage" b
\usepackage{$1}$0
endsnippet

snippet env "Environment" b
\begin{$1}
	$0
\end{$1}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

post_expand "vim.eval('feedkeys(\"\<C-f>\")')"
snippet - "Item" b
\item $0
endsnippet

snippet bf "Bold text"
\textbf{$1}$0
endsnippet

snippet it "Italic text"
\textit{$1}$0
endsnippet

context "not math()"
snippet >> "textrightarrow" Aw
\textrightarrow{} $0
endsnippet

snippet \\ "backslash" iA
\bs $0
endsnippet

# Code listing

snippet lsi "Inline code listing" w
{\lstinline!$1!}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
  snip.rv = ' '
else:
  snip.rv = ''
`$2
endsnippet

snippet lst "Code listing" b
\begin{lstlisting}
$1
\end{lstlisting}
$0
endsnippet


# Math snippets

context "not math()"
snippet mm "Inline math" Aw
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
  snip.rv = ' '
else:
  snip.rv = ''
`$2
endsnippet

context "not math()"
snippet dm "Display math" Aw
\[
$1
\]
$0
endsnippet


context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet || "mid" iA
\mid $0
endsnippet

context "math()"
snippet |- "vdash" iA
\vdash $0
endsnippet

context "math()"
snippet >> "rightarrow" iA
\rightarrow $0
endsnippet

context "math()"
snippet << "leftarrow" iA
\leftarrow $0
endsnippet

context "math()"
snippet <> "leftrightarrow" iA
\leftrightarrow $0
endsnippet

priority 1
context "math()"
snippet |>> "mapsto" iA
\mapsto $0
endsnippet

context "math()"
snippet /= "not equal" iA
\neq $0
endsnippet

context "math()"
snippet >= "greater or equal" iA
\geq $0
endsnippet

context "math()"
snippet <= "less or equal" iA
\leq $0
endsnippet

context "math()"
snippet ** "product" iA
\cdot $0
endsnippet

context "math()"
snippet // "fraction" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet prm "prime" iA
^\prime $0
endsnippet

context "math()"
snippet box "box" iA
\gbox $0
endsnippet

context "math()"
snippet dia "diamond" iA
\fdia $0
endsnippet

context "math()"
snippet set "Set" i
\\{$1\\}$0
endsnippet

context "math()"
snippet infer "infer"
\infer[$1]{$2}{
	$3
}$0
endsnippet

